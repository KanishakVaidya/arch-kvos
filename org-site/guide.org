#+title: KVOS Guides
#+HTML_HEAD: <link rel="stylesheet" href="/style.css">
#+HTML_HEAD: <link rel="stylesheet" href="/stylesheets/toc.css">
#+HTML_HEAD: <script src="/menu.js"></script>
#+OPTIONS: toc:nil num:nil timestamp:nil html-style:nil title:nil

#+begin_export html
<div class="nav" id="nav">
    <a href="javascript:void(0);" onclick="myFunction()" class="menuicon"><b>MENU</b></a>
    <a href="./index.html">Home</a>
    <a href="./screenshots.html">Screenshots</a>
    <a href="./installation.html">Install KVOS</a>
    <a href="./guide.html" class="current">Guide</a>
    <a href="./software.html">Pre-Installed</a>
</div>
#+end_export

* After KVOS installation
** Package cache cleaning
- [[https://wiki.archlinux.org/title/pacman#Cleaning_the_package_cache][Reference: Archwiki Guide to package cachhe cleaning]]
Pacman stores it downloaded packages in ~/var/cache/pacman/pkg~ and does not remove old versions automatically. This can cause this directory to grow very large, very fast. To keep the system clean, install the ~pacman-contrib~ package, and then
#+begin_src shell
doas paccache -r
#+end_src
This will delete all cached versions of installed and uninstalled packages, except for the most recent three.
To specify how many recent versions you want to keep, use (~-rk1~ will keep only one previous generation)
#+begin_src shell
doas paccache -rk1
#+end_src
To limit the action of ~paccache~ to uninstalled packages only, add the ~-u~ flag.
#+begin_src shell
doas paccache -ruk0
#+end_src
*** Inbuilt pacman actions
Pacman also has some built-in options to clean the cache and the leftover database files from repositories which are no longer listed in the configuration file ~/etc/pacman.conf~
To remove all the cached packages that are not currently installed, and the unused sync database, execute:
#+begin_src shell
doas pacman -Sc
#+end_src
To remove all files from the cache, use the clean switch twice, this is the most aggressive approach and will leave nothing in the cache directory:
#+begin_src shell
doas pacman -Scc
#+end_src
** Changing keyboard and display brightness
Only root can change the brightness by editing files in ~/sys/class/backlight~. To allow users in the video group to change the brightness, a udev rule such as the following can be used (a sample ~/etc/udev/rules.d/98-backlight.rules~ file)
#+begin_src shell
# allow screen brightness control for everyone
ACTION=="add", SUBSYSTEM=="backlight", RUN+="/bin/chgrp video $sys$devpath/brightness", RUN+="/bin/chmod g+w $sys$devpath/brightness"
#+end_src
Make sure the user is in ~video~ group. If you used [[file:static/scripts/configuration-script.sh][my arch install script]] then user will be in the ~video~ group.

To change keyboard brightness, following udev rule can be used (a sample ~/etc/udev/rules.d/99-asus.rules~ file):
#+begin_src shell
# allow keyboard brightness control for everyone
ACTION=="add", SUBSYSTEM=="leds", KERNEL=="asus::kbd_backlight", RUN+="/bin/chmod a+w /sys/class/leds/%k/brightness"
#+end_src
Again change ~KERNEL==~ with appropriate entry from ~ls /sys/class/leds~.

*** References
- [[https://wiki.archlinux.org/title/backlight#ACPI][ArchWiki]]
- [[https://superuser.com/a/1393488][Writing to file /sys/class/backlight/<vendor>/brightness]]
- [[https://unix.stackexchange.com/a/593121][How to set permissions in /sys permanently?]]

** Using Wacom
*** Install the driver
#+begin_src shell
pacman -S xf86-input-wacom
#+end_src
This provides xsetwacom command.
*** Mapping the tablet to a display (for multi-monitor)
First list the wacom devices using the command
#+begin_src shell
xsetwacom list devices
#+end_src
A sample output is
#+begin_src
# Wacom One by Wacom S Pen stylus 	id: 15	type: STYLUS
# Wacom One by Wacom S Pen eraser 	id: 23	type: ERASER
#+end_src
To map wacom tablet with ID 15 to display named HDMI-1, use following command
#+begin_src shell
xsetwacom --set "15" MapToOutput HDMI-1
#+end_src
Sometimes output names "HEAD-0" and "HEAD-1" have to be used insted of HDMI-1
